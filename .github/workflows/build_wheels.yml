name: Build wheels

on:
  pull_request:
  release:
    types: [created, edited]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade -r development.txt
          python -m pip install cibuildwheel==2.4.0

      - name: Install Visual C++ for Python 2.7
        if: runner.os == 'Windows'
        run: |
          choco install vcpython27 -f -y
          choco install golang -f -y
          choco install mingw -f -y

      - name: Build Linux wheels and sdist
        if: runner.os == 'Linux'
        env:
          CIBW_BEFORE_ALL: 'pwd && ls && chmod +x ./scripts/setup-linux.sh && ./scripts/setup-linux.sh'
          CIBW_BUILD: cp37-* cp38-* cp39-* cp310-*
          CIBW_SKIP: "cp35-* *-win32 *-manylinux_i686 *-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x *-musllinux_*"
        run: |
          python setup.py sdist
          python3 -m cibuildwheel --output-dir wheelhouse

      - name: Build macOS wheels
        if: runner.os == 'macOS'
        env:
          CIBW_BEFORE_ALL: 'pwd && ls && chmod +x ./scripts/setup-macos.sh && ./scripts/setup-macos.sh'
          CIBW_BUILD: cp37-* cp38-* cp39-* cp310-*
          CIBW_SKIP: "cp35-* *-win32 *-manylinux_i686 *-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x *-musllinux_*"
        run: |
          python3 -m cibuildwheel --output-dir wheelhouse

      - name: Build Windows wheels
        if: runner.os == 'Windows'
        env:
          CIBW_BUILD: cp37-* cp38-* cp39-* cp310-*
          CIBW_SKIP: "cp35-* *-win32 *-manylinux_i686 *-manylinux_aarch64 *-manylinux_ppc64le *-manylinux_s390x *-musllinux_*"
        run: |
          go version
          python -m cibuildwheel --output-dir wheelhouse

      # - name: Publish sdist
      #   if: runner.os == 'Linux'
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     twine check ./dist/*.tar.gz
      #     twine upload --skip-existing ./dist/*

      # - uses: actions/upload-artifact@v2
      #   with:
      #     path: |
      #      ./wheelhouse/*.whl
      #      ./dist/*.tar.gz

      # - name: Publish wheels
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     twine check ./wheelhouse/*.whl
      #     twine upload --skip-existing ./wheelhouse/*
